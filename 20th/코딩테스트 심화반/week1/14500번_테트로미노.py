n, m = map(int, input().split())
numbers = [list(map(int, input().split())) for _ in range(n)]

# 모든 테트로미노 모양 정의
# 각 모양은 (x, y) 좌표의 리스트로 나타냄, (0,0)은 기준점
tetromino_shapes = [
    # ㅡ 모양
    [(0,0),(0,1),(0,2),(0,3)],
    # ㅣ모양
    [(0,0),(1,0),(2,0),(3,0)],
    # ㅁ
    [(0,0),(0,1),(1,0),(1,1)],
    # L, J 모양
    [(0,0),(1,0),(2,0),(2,1)],
    [(0,1),(1,1),(2,1),(2,0)],
    [(0,0),(0,1),(1,0),(2,0)],
    [(0,0),(0,1),(1,1),(2,1)],
    [(0,0),(0,1),(0,2),(1,0)],
    [(0,0),(0,1),(0,2),(1,2)],
    [(0,0),(1,0),(1,1),(1,2)],
    [(0,2),(1,0),(1,1),(1,2)],
    # S, Z 모양
    [(0,0),(0,1),(1,1),(1,2)],
    [(0,1),(0,2),(1,0),(1,1)],
    [(0,0),(1,0),(1,1),(2,1)],
    [(0,1),(1,0),(1,1),(2,0)],
    # ㅗ 모양
    [(0,0),(0,1),(0,2),(1,1)],
    [(0,1),(1,0),(1,1),(2,1)],
    [(1,0),(1,1),(1,2),(0,1)],
    [(0,0),(1,0),(1,1),(2,0)]
]

# 테트로미노 합의 최대값 초기화
max_num = 0

# 배열의 모든 좌표를 기준점으로 잡고 테트로미노 배치 시도
for i in range(n):       # 세로 좌표
    for j in range(m):   # 가로 좌표
        for shape in tetromino_shapes:  # 모든 테트로미노 모양
            try:
                # 현재 좌표 기준 모양 합 계산
                total = sum(numbers[i+dx][j+dy] for dx, dy in shape)
                # 최대값 갱신
                max_num = max(max_num, total)
            except IndexError:  # 범위를 벗어나면 무시
                continue

print(max_num)